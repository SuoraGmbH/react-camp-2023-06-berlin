/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * Time Tracker
 * This describes the backend of a very basic time tracker.
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from "zod";
import { rest } from "msw";
import { faker } from "@faker-js/faker";

/**
 * @summary Add a new time entry
 */
export const addTimeEntryBody = zod.object({
  id: zod.string(),
  comment: zod.string(),
  start: zod.string().datetime(),
  end: zod.string().datetime(),
});

/**
 * @summary Update an existing time entry
 */
export const updateTimeEntryBody = zod.object({
  id: zod.string(),
  comment: zod.string(),
  start: zod.string().datetime(),
  end: zod.string().datetime(),
});

/**
 * Returns a single time entry
 * @summary Find time entry by ID
 */
export const getTimeEntryByIdParams = zod.object({
  timeEntryId: zod.number(),
});

export const getTimeEntryByIdResponse = zod.object({
  id: zod.string(),
  comment: zod.string(),
  start: zod.string().datetime(),
  end: zod.string().datetime(),
});

/**
 * @summary Deletes a time entry
 */
export const deleteTimeEntryParams = zod.object({
  timeEntryId: zod.number(),
});

export const getGetTimeEntryByIdMock = () => ({
  id: faker.random.word(),
  comment: faker.random.word(),
  start: `${faker.date.past().toISOString().split(".")[0]}Z`,
  end: `${faker.date.past().toISOString().split(".")[0]}Z`,
});

export const getTimeTrackerMSW = () => [
  rest.post("*/timeEntries", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.put("*/timeEntries", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
  rest.get("*/timeEntries/:timeEntryId", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getGetTimeEntryByIdMock())
    );
  }),
  rest.delete("*/timeEntries/:timeEntryId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"));
  }),
];
